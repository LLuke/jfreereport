/**
 * ================================================
 * LibLoader : a free Java resource loading library
 * ================================================
 *
 * Project Info:  http://www.jfree.org/jfreereport/libloader/
 * Project Lead:  Thomas Morgner;
 *
 * (C) Copyright 2006, by Pentaho Corporation and Contributors.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 * ------------
 * ZipResourceKey.java
 * ------------
 * (C) Copyright 2006, by Pentaho Corporation.
 *
 * Original Author:  Thomas Morgner;
 * Contributor(s):   -;
 *
 * $Id$
 *
 * Changes
 * -------
 *
 *
 */
package org.jfree.resourceloader.loader.zip;

import org.jfree.resourceloader.ResourceData;
import org.jfree.resourceloader.ResourceKey;

/**
 * This is a recursive key.
 *
 * @author Thomas Morgner
 */
public class ZipResourceKey implements ResourceKey
{
  private ResourceData zipFile;
  private String entryName;

  public ZipResourceKey(final ResourceData zipFile,
                        final String entryName)
  {
    if (zipFile == null)
    {
      throw new NullPointerException();
    }
    if (entryName == null)
    {
      throw new NullPointerException();
    }
    this.zipFile = zipFile;
    this.entryName = entryName;
  }

  public ResourceData getZipFile()
  {
    return zipFile;
  }

  public String getEntryName()
  {
    return entryName;
  }

  /**
   * Returns the schema of this resource key. The schema can be mapped to a
   * known resource loader. If no resource loader is available for the given
   * schema, the resource will be unavailable.
   *
   * @return
   */
  public String getSchema()
  {
    return "zip";
  }

  public boolean equals(final Object o)
  {
    if (this == o)
    {
      return true;
    }
    if (o == null || getClass() != o.getClass())
    {
      return false;
    }

    final ZipResourceKey that = (ZipResourceKey) o;

    if (!entryName.equals(that.entryName))
    {
      return false;
    }
    if (!zipFile.getKey().equals(that.zipFile.getKey()))
    {
      return false;
    }

    return true;
  }

  public int hashCode()
  {
    int result = zipFile.getKey().hashCode();
    result = 29 * result + entryName.hashCode();
    return result;
  }

  /**
   * Creates a unique identifier for this key.
   * <p/>
   * The following statement must be true for all external forms generated by
   * this method: (key1.equals(key2) == key1.toExternalForm().equals(key2.toExternalForm())
   *
   * @return
   */
  public String toExternalForm()
  {
    final ResourceKey zipKey = zipFile.getKey();
    return entryName + "(" + zipKey.getSchema() + ";" + zipKey.toExternalForm() + ")";
  }
}
