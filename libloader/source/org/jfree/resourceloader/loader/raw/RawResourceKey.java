/**
 * ================================================
 * LibLoader : a free Java resource loading library
 * ================================================
 *
 * Project Info:  http://jfreereport.pentaho.org/libloader/
 *
 * (C) Copyright 2006, by Pentaho Corporation and Contributors.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 *
 * ------------
 * $Id: RawResourceKey.java,v 1.4 2006/12/03 16:41:16 taqua Exp $
 * ------------
 * (C) Copyright 2006, by Pentaho Corporation.
 */
package org.jfree.resourceloader.loader.raw;

import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Map;

import org.jfree.resourceloader.AbstractResourceKey;

/**
 * This is a resource key, which already caries all the data as byte[]. It is
 * intended to utilize the caching framework for other inline parsing (and its
 * main purpose is for caching style declarations for libLayout).
 *
 * @author Thomas Morgner
 */
public class RawResourceKey extends AbstractResourceKey
{
  private transient byte[] data;

  public RawResourceKey(final Map values)
  {
    super(values);
    this.data = (byte[]) getLoaderParameter(AbstractResourceKey.CONTENT_KEY);
  }

  /**
   * Returns the schema of this resource key. The schema can be mapped to a
   * known resource loader. If no resource loader is available for the given
   * schema, the resource will be unavailable.
   *
   * @return
   */
  public String getSchema()
  {
    return "raw:bytes";
  }

  public byte[] getData()
  {
    if (data == null)
    {
      data = (byte[]) getLoaderParameter(AbstractResourceKey.CONTENT_KEY);
    }
    return (byte[]) data.clone();
  }

  public boolean equals(final Object o)
  {
    if (this == o)
    {
      return true;
    }
    if (o == null || getClass() != o.getClass())
    {
      return false;
    }

    final RawResourceKey that = (RawResourceKey) o;
    if (super.equals(o) == false)
    {
      return false;
    }
    return Arrays.equals(getData(), that.getData());
  }

  /**
   * Creates a unique identifier for this key.
   * <p/>
   * The following statement must be true for all external forms generated by
   * this method: (key1.equals(key2) == key1.toExternalForm().equals(key2.toExternalForm())
   *
   * @return
   */
  public String toExternalForm()
  {
    // Make a fingerprint ..
    try
    {
      MessageDigest digestMD5 = MessageDigest.getInstance("MD5");
      MessageDigest digestSHA = MessageDigest.getInstance("SHA");

      final byte[] dataMD5 = digestMD5.digest(data);
      final byte[] dataSHA = digestSHA.digest(data);
      if (dataSHA == null || dataMD5 == null)
      {
        return null;
      }

      final StringBuffer b = new StringBuffer();
      b.append(data.length);
      b.append(":");
      for (int i = 0; i < data.length; i += 2)
      {
        int element = (data[i] & 0xff);
        if (i + 1 < data.length)
        {
          element = element | ((data[i + 1] & 0xff) << 8);
        }
        b.append((char) element);
      }
      return b.toString();
    }
    catch (NoSuchAlgorithmException nse)
    {
      return null;
    }

  }

  /**
   * Tries to build an URL. This is a compatiblity method for supporting other
   * resource loader frameworks. The method may return null, if there is no URL
   * representation for the given resource-key.
   *
   * @return the URL or null.
   */
  public URL toURL()
  {
    return null;
  }
}
