/**
 * ===========================================
 * LibLayout : a free Java layouting library
 * ===========================================
 *
 * Project Info:  http://www.jfree.org/liblayout/
 * Project Lead:  Thomas Morgner;
 *
 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 * ------------
 * TableCellRenderBox.java
 * ------------
 * (C) Copyright 2006, by Pentaho Corporation.
 *
 * Original Author:  Thomas Morgner;
 * Contributor(s):   -;
 *
 * $Id: TableCellRenderBox.java,v 1.7 2006/07/26 12:09:51 taqua Exp $
 *
 * Changes
 * -------
 *
 *
 */
package org.jfree.layouting.renderer.model.table;

import org.jfree.layouting.input.style.keys.line.LineStyleKeys;
import org.jfree.layouting.input.style.keys.line.VerticalAlign;
import org.jfree.layouting.input.style.keys.table.TableStyleKeys;
import org.jfree.layouting.input.style.values.CSSValue;
import org.jfree.layouting.input.style.values.CSSConstant;
import org.jfree.layouting.layouter.context.LayoutContext;
import org.jfree.layouting.layouter.style.CSSValueResolverUtility;
import org.jfree.layouting.renderer.border.Border;
import org.jfree.layouting.renderer.model.BlockRenderBox;
import org.jfree.layouting.renderer.model.BoxDefinition;
import org.jfree.layouting.renderer.model.RenderBox;
import org.jfree.layouting.renderer.model.RenderNode;
import org.jfree.layouting.renderer.model.RenderNodeState;
import org.jfree.layouting.renderer.model.table.rows.TableRow;
import org.jfree.layouting.renderer.text.ExtendedBaselineInfo;
import org.jfree.layouting.util.geom.StrictInsets;
import org.jfree.util.Log;

/**
 * A table section box does not much rendering or layouting at all. It
 * represents one of the three possible sections and behaves like any other
 * block box. But (here it comes!) it refuses to be added to anything else than
 * a TableRenderBox (a small check to save me a lot of insanity ..).
 *
 * @author Thomas Morgner
 */
public class TableCellRenderBox extends BlockRenderBox implements TableCell
{
  private int colSpan;
  private int rowSpan;
  private boolean autoGenerated;
  private Border effectiveBorder;

  public TableCellRenderBox(final BoxDefinition boxDefinition,
                            boolean autoGenerated)
  {
    super(boxDefinition, VerticalAlign.BASELINE);
    this.autoGenerated = autoGenerated;
    this.colSpan = 1;
    this.rowSpan = 1;
  }

  public TableCellRenderBox(final BoxDefinition boxDefinition,
                            final LayoutContext context)
  {
    super(boxDefinition, normalizeAlignment
            (context.getStyle().getValue(LineStyleKeys.VERTICAL_ALIGN)));
    final CSSValue csValue = context.getStyle().getValue(TableStyleKeys.COL_SPAN);
    this.colSpan = (int) CSSValueResolverUtility.getNumericValue(csValue, 1);

    final CSSValue rsValue = context.getStyle().getValue(TableStyleKeys.ROW_SPAN);
    this.rowSpan = (int) CSSValueResolverUtility.getNumericValue(rsValue, 1);
    this.autoGenerated = false;
  }

  private static CSSValue normalizeAlignment(CSSValue verticalAlignment)
  {
    if (VerticalAlign.BOTTOM.equals(verticalAlignment))
    {
      return verticalAlignment;
    }
    if (VerticalAlign.TOP.equals(verticalAlignment))
    {
      return verticalAlignment;
    }
    if (VerticalAlign.MIDDLE.equals(verticalAlignment))
    {
      return verticalAlignment;
    }
    return VerticalAlign.BASELINE;
  }

  public boolean isAutoGenerated()
  {
    return autoGenerated;
  }

  public RenderNode getCellNode()
  {
    return this;
  }

  public TableRenderBox getTable()
  {
    RenderBox parent = getParent();
    if (parent instanceof TableRowRenderBox)
    {
      final TableRowRenderBox rowRenderBox =
              (TableRowRenderBox) parent;
      return rowRenderBox.getTable();
    }
    return null;
  }

  protected void validateMargins()
  {
    if (isMarginsValidated())
    {
      return;
    }

    StrictInsets margins = getAbsoluteMarginsInternal();
    margins.setTop(0);
    margins.setBottom(0);
    margins.setLeft(0);
    margins.setRight(0);

    StrictInsets effectiveMargins = getEffectiveMarginsInternal();
    effectiveMargins.setTop(0);
    effectiveMargins.setBottom(0);
    effectiveMargins.setLeft(0);
    effectiveMargins.setRight(0);

    setMarginsValidated(true);
  }

  public void validate(RenderNodeState state)
  {
    throw new UnsupportedOperationException
            ("Table-Cells do not validate this way.");
  }

  public int getColSpan()
  {
    return colSpan;
  }

  public int getRowSpan()
  {
    return rowSpan;
  }

  /**
   * If that method returns true, the element will not be used for rendering.
   * For the purpose of computing sizes or performing the layouting (in the
   * validate() step), this element will treated as if it is not there.
   * <p/>
   * If the element reports itself as non-empty, however, it will affect the
   * margin computation.
   *
   * @return
   */
  public boolean isIgnorableForRendering()
  {
    return false;
  }

  public Border getEffectiveBorder()
  {
    return effectiveBorder;
  }

  public void setEffectiveBorder(final Border effectiveBorder)
  {
    this.effectiveBorder = effectiveBorder;
  }

  public Border getOriginalBorder()
  {
    return getBoxDefinition().getBorder();
  }

  /**
   * The table-cells validate method has to take the vertical alignment into
   * account.
   *
   * @param guessing whether there is a valid row height (and therefore
   *                 alignment works).
   * @param row
   */
  public void validate(final boolean guessing,
                       final TableRow row)
  {

    final RenderNodeState state = getState();
    if (state == RenderNodeState.FINISHED)
    {
      return;
    }
    validateBorders();
    validatePaddings();
    validateMargins();

    Log.debug("TABLE-CELL: Begin Validate");

    final CSSValue verticalAlignment = getVerticalAlignment();
    // First run: Get the default size. This will be the only run, if the
    // alignment is either baseline or top.
    final long leadingPaddings = getLeadingInsets(getMinorAxis());
    final long trailingPaddings = getTrailingInsets(getMinorAxis());
    final long heightAbove = row.getValidatedLeadingSize();

    final long initialNodePos = getPosition(getMajorAxis()) + getLeadingInsets(getMajorAxis());
    long nodePos = initialNodePos;
    final long minorAxisNodePos =
            getPosition(getMinorAxis()) + leadingPaddings;

    final long defaultNodeWidth = Math.max(0,
            getDimension(getMinorAxis()) - leadingPaddings - trailingPaddings);

    long trailingMajor = 0;
    long trailingMinor = 0;
    boolean firstNodeAligned;
    if (guessing)
    {
      firstNodeAligned = true;
    }
    else
    {
      firstNodeAligned = (verticalAlignment != VerticalAlign.BASELINE);
    }
    RenderNode node = getFirstChild();
    while (node != null)
    {
      if (node.isIgnorableForRendering())
      {
        // Ignore all empty childs. However, give it an position.
        node.setPosition(getMajorAxis(), nodePos);
        node.setPosition(getMinorAxis(), minorAxisNodePos);
        node.setDimension(getMinorAxis(), 0);
        node.setDimension(getMajorAxis(), 0);
        node.validate(RenderNodeState.FINISHED);
        node = node.getNext();
        continue;
      }

      final long nodeSizeMinor = Math.min
              (defaultNodeWidth, node.getEffectiveLayoutSize(getMinorAxis()));
      final long leadingMinor = Math.max
              (node.getLeadingSpace(getMinorAxis()), trailingMinor);

      final long leadingMajor = Math.max
              (node.getLeadingSpace(getMajorAxis()), trailingMajor);
      nodePos += leadingMajor;

      if (firstNodeAligned == false)
      {
        final ExtendedBaselineInfo baselineInfo = node.getBaselineInfo();
        final long nodeHeightAbove;
        if (baselineInfo == null)
        {
          nodeHeightAbove = 0;
        }
        else
        {
          nodeHeightAbove =
                  baselineInfo.getBaseline(ExtendedBaselineInfo.ALPHABETHC);
        }
        final long nodeMinorPos = (heightAbove - nodeHeightAbove) -
                getLeadingInsets(getMajorAxis());

        firstNodeAligned = true;
        nodePos += nodeMinorPos;
      }

      node.setPosition(getMajorAxis(), nodePos);
      node.setPosition(getMinorAxis(), minorAxisNodePos + leadingMinor);
      node.setDimension(getMinorAxis(), nodeSizeMinor);
      node.setDimension(getMajorAxis(), node.getEffectiveLayoutSize(getMajorAxis()));
      node.validate(RenderNodeState.FINISHED);

      trailingMajor = node.getTrailingSpace(getMajorAxis());
      trailingMinor = node.getTrailingSpace(getMinorAxis());


      nodePos += node.getDimension(getMajorAxis());
      node = node.getNext();
    }

    final long trailingInsets = getTrailingInsets(getMajorAxis());
    if (guessing)
    {
      setDimension(getMajorAxis(), trailingMajor + (nodePos + trailingInsets) - getPosition(getMajorAxis()));
      setDimension(getMinorAxis(), defaultNodeWidth + leadingPaddings + trailingPaddings);

      Log.debug("TABLE-CELL: Leave Validate: " + defaultNodeWidth + " " +
              leadingPaddings + " " + trailingPaddings);
      setState(RenderNodeState.FINISHED);
      return;
    }

    setDimension(getMajorAxis(), row.getValidateSize());
    long extraSpace = row.getValidateSize() -
            (nodePos - initialNodePos) - getTrailingInsets(getMajorAxis()) -
            getLeadingInsets(getMajorAxis());

    if (extraSpace <= 0 ||
        VerticalAlign.BASELINE.equals(verticalAlignment) ||
        VerticalAlign.TOP.equals(verticalAlignment))
    {
      setDimension(getMinorAxis(), defaultNodeWidth + leadingPaddings + trailingPaddings);

      Log.debug("TABLE-CELL: Leave Validate: " + defaultNodeWidth + " " +
              leadingPaddings + " " + trailingPaddings);
      setState(RenderNodeState.FINISHED);
      return;
    }

    final float alignmentFactor;
    // Second run. We have extraspace to distribute.
    if (VerticalAlign.CENTRAL.equals(verticalAlignment) ||
        VerticalAlign.MIDDLE.equals(verticalAlignment))
    {
      alignmentFactor = 0.5f;
    }
    else
    {
      alignmentFactor = 1;
    }

    final long extraSpaceTop = (long) (alignmentFactor * extraSpace);
    nodePos = extraSpaceTop + initialNodePos;

    node = getFirstChild();
    trailingMajor = 0;
    trailingMinor = 0;
    while (node != null)
    {
      if (node.isIgnorableForRendering())
      {
        // Ignore all empty childs. However, give it an position.
        node.setPosition(getMajorAxis(), nodePos);
        node.setPosition(getMinorAxis(), minorAxisNodePos);
        node.setDimension(getMinorAxis(), 0);
        node.setDimension(getMajorAxis(), 0);
        node.validate(RenderNodeState.FINISHED);
        node = node.getNext();
        continue;
      }

      final long nodeSizeMinor = Math.min
              (defaultNodeWidth, node.getEffectiveLayoutSize(getMinorAxis()));
      final long leadingMinor = Math.max
              (node.getLeadingSpace(getMinorAxis()), trailingMinor);

      final long leadingMajor = Math.max
              (node.getLeadingSpace(getMajorAxis()), trailingMajor);
      nodePos += leadingMajor;

      node.setPosition(getMajorAxis(), nodePos);
      node.setPosition(getMinorAxis(), minorAxisNodePos + leadingMinor);
      node.setDimension(getMinorAxis(), nodeSizeMinor);
      node.setDimension(getMajorAxis(), node.getEffectiveLayoutSize(getMajorAxis()));
      node.validate(RenderNodeState.FINISHED);

      trailingMajor = node.getTrailingSpace(getMajorAxis());
      trailingMinor = node.getTrailingSpace(getMinorAxis());


      nodePos += node.getDimension(getMajorAxis());
      node = node.getNext();
    }

    setDimension(getMinorAxis(), defaultNodeWidth + leadingPaddings + trailingPaddings);
    setDimension(getMajorAxis(), row.getValidateSize());

    Log.debug("TABLE-CELL: Leave Validate: " + defaultNodeWidth + " " +
            leadingPaddings + " " + trailingPaddings);
    setState(RenderNodeState.FINISHED);
  }
}
