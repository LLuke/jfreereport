/**
 * ===========================================
 * LibLayout : a free Java layouting library
 * ===========================================
 *
 * Project Info:  http://www.jfree.org/liblayout/
 * Project Lead:  Thomas Morgner;
 *
 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 * ------------
 * DisplayBlockElement.java
 * ------------
 * (C) Copyright 2006, by Pentaho Corporation.
 *
 * Original Author:  Thomas Morgner;
 * Contributor(s):   -;
 *
 * $Id$
 *
 * Changes
 * -------
 *
 *
 */
package org.jfree.layouting.normalizer.displaymodel;

import org.jfree.layouting.input.style.keys.box.BoxStyleKeys;
import org.jfree.layouting.input.style.keys.box.DisplayRole;
import org.jfree.layouting.input.style.values.CSSValue;
import org.jfree.layouting.layouter.context.LayoutContext;
import org.jfree.layouting.layouter.context.ContextId;
import org.jfree.layouting.layouter.style.LayoutStyle;
import org.jfree.layouting.layouter.style.resolver.StyleResolver;
import org.jfree.layouting.normalizer.content.NormalizationException;
import org.jfree.layouting.LayoutProcess;

/**
 * Note: Although the linebox is also some kind of auto-generated content,
 * it must not have set that particular flag set. The autogenerated flag
 * is needed for the modelbuilder to keep sync the inner state with the
 * calls from outside.
 *
 * @author Thomas Morgner
 */
public class DisplayBlockElement extends DisplayElement
{
  private DisplayInlineElement lineBox;
  private boolean empty;

  public DisplayBlockElement(final LayoutContext context)
  {
    super(context);
    empty = true;
  }

  public Object clone() throws CloneNotSupportedException
  {
    DisplayBlockElement dbe = (DisplayBlockElement) super.clone();
    if (lineBox != null)
    {
      dbe.lineBox = (DisplayInlineElement) lineBox.clone();
      dbe.lineBox.setParent(dbe);
    }
    return dbe;
  }

  public void add(DisplayNode node) throws NormalizationException
  {
    final LayoutStyle style = node.getLayoutContext().getStyle();
    final CSSValue dr = style.getValue(BoxStyleKeys.DISPLAY_ROLE);
    if ((node instanceof DisplayElement == false) ||
        DisplayRole.INLINE.equals(dr))
    {
      if (lineBox == null)
      {
        final ContextId id = new ContextId(ContextId.SOURCE_DISPLAY_MODEL, -1, 0);
        final LayoutProcess layoutProcess = getRootFlow().getLayoutProcess();
        final StyleResolver styleResolver = layoutProcess.getStyleResolver();
        final LayoutContext context = styleResolver.createAnonymousContext
                        (id, getLayoutContext());
        lineBox = new DisplayRootInlineElement(context);
        addInternal(lineBox);
      }
      lineBox.add(node);
    }
    else
    {
      if (lineBox != null)
      {
        lineBox.markFinished();
      }
      lineBox = null;
      addInternal(node);
    }
  }

  protected void addInternal(DisplayNode node) throws NormalizationException
  {
    this.empty = false;
    super.addInternal(node);
  }

  /**
   * The linebox is not preserved when deriving; deriving happens on pagebreaks
   * and thus always opens a new context.
   *
   * @return
   */
  public DisplayNode derive()
  {
    DisplayBlockElement de = (DisplayBlockElement) super.derive();
    de.empty = true;
    de.lineBox = null;
    return de;
  }

  public void markFinished() throws NormalizationException
  {
    if (isFinished())
    {
      return;
    }

    if (empty)
    {
      // each block element *must* have a linebox to check for pagebreaks.
      DisplayInlineElement lineBox =
              new DisplayInlineElement(getLayoutContext().derive());
      addInternal(lineBox);
      lineBox.markFinished();
    }
    else
    {
      if (lineBox != null && lineBox.isFinished() == false)
      {
        lineBox.markFinished();
      }
    }
    super.markFinished();
    signalFinish();
  }

  public DisplayInlineElement getLineBox()
  {
    return lineBox;
  }


  protected void signalFinish() throws NormalizationException
  {
    getRootFlow().getContentGenerator().finishedBlock();
  }
}
