/**
 * ===========================================
 * LibLayout : a free Java layouting library
 * ===========================================
 *
 * Project Info:  http://jfreereport.pentaho.org/liblayout/
 *
 * (C) Copyright 2000-2005, by Pentaho Corporation and Contributors.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 * ------------
 * $Id$
 * ------------
 * (C) Copyright 2006, by Pentaho Corporation.
 */
package org.jfree.layouting.normalizer.displaymodel;

import org.jfree.layouting.layouter.context.LayoutContext;
import org.jfree.layouting.normalizer.content.NormalizationException;
import org.jfree.util.Log;

/**
 * A display node is something displayable. It has a style and a layout
 * context.
 *
 * @author Thomas Morgner
 */
public abstract class DisplayNode implements Cloneable
{
  private LayoutContext layoutContext;
  private DisplayElement parent;
  private boolean finished;
  private boolean autoGenerated;

  public DisplayNode(final LayoutContext layoutContext)
  {
    this.layoutContext = layoutContext;
  }

  public LayoutContext getLayoutContext()
  {
    return layoutContext;
  }

  public DisplayElement getParent()
  {
    return parent;
  }

  public void setParent(final DisplayElement parent)
  {
    this.parent = parent;
  }

  public void markFinished() throws NormalizationException
  {
    finished = true;
  }

  public boolean isFinished()
  {
    return finished;
  }

  public Object clone() throws CloneNotSupportedException
  {
    DisplayNode node = (DisplayNode) super.clone();
    // We try to get away without cloning the context, this is expensive and
    // we do not expect it to change at this point anyway ..
//    if (layoutContext != null)
//    {
//      node.layoutContext = (LayoutContext) layoutContext.clone();
//    }
    return node;
  }

  public DisplayNode derive()
  {
    try
    {
      DisplayNode node = (DisplayNode) clone();
      node.parent = null;
      return node;
    }
    catch (CloneNotSupportedException e)
    {
      throw new IllegalStateException();
    }
  }

  public DisplayRoot getRootFlow()
  {
    if (parent == null)
    {
      throw new IllegalArgumentException
              ("Oh, I dont have a flow! Why don't I have a flow?");
    }
    return parent.getRootFlow();
  }

  public boolean isAutoGenerated()
  {
    return autoGenerated;
  }

  public void setAutoGenerated(final boolean autoGenerated)
  {
    this.autoGenerated = autoGenerated;
  }

  protected abstract void signalStart () throws NormalizationException;

  public void reopen()
  {
    finished = false;
  }
}
