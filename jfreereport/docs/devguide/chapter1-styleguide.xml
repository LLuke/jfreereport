<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>Style Guide</title>

  <section>
    <title>Introduction</title>

    <para>Whenever more than one developer comes together to work on a shared
    project, questions of style consistency arise. As every developer has his
    own habbit of formating code, naming methods and variables, the resulting
    mix becomes confusing and hard to read, as soon as two incompatible styles
    get mixed up. The only way to avoid such a chaos, is to define mandatory
    rules, which every developer has to follow.</para>

    <para>This style guide defines such a set of common style rules for
    JFreeReport and all adjacent projects.</para>

    <para>Some of the given rules are mandatory and must not be ignored or
    violated. Other rules given in this document can be considered
    recommendations, they should be followed as closely as possible, but can
    be violated if there is a known (and documented) reason for it.</para>

    <para>As Java is a complex language, which gives you a great freedom in
    writing your code, there will be many fields, which remain uncovered by
    the rules given in this document. Where ever possible, we will try to give
    examples for such known cases to reduce the number of different variations
    of these cases.</para>
  </section>

  <section>
    <title>Source-Code Level</title>

    <para>This source code style guide uses the same structure as the <ulink
    url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Java
    StyleGuide</ulink> written by Sun. Where ever possible, we will refer to
    the rules in that Guide.</para>

    <section>
      <title>Project Directory Structure And File Names</title>

      <para>All projects should share a common structure. All files for a
      project <emphasis>must</emphasis> reside below a single directory, which
      <emphasis>must</emphasis> be named after the project. All Java source
      files must be contained in a directory called "source", which must be
      located directly under the project's root directory. Jar-Files, the
      project might depend on, must be located inside a directory called
      "lib", which also must be located directly under the project's root
      directory.</para>

      <para>All projects must provide ANT-build scripts, which create the
      release distribution files. The build scripts must be self contained and
      must not have any private dependencies outside the project's directory.
      All external dependencies on the build script must be documented and
      must not include non-opensource packages. Every user of the project must
      be able to rebuild the complete project.</para>

      <para>Every project should provide at least a
      <filename>ChangeLog</filename> file, which documents the development
      progress and a README file, which describes the purpose of the project,
      how to get started with the files in the project and which gives
      pointers to where to find additional documentation, if available.</para>

      <para>Finally, to comply with the GLP or LGPL, every project must
      contain a copy of its licence in the root of its project
      directory.</para>
    </section>

    <section>
      <title>Java File Structure</title>

      <para>Each Java source file must contain a single public class or
      interface. Every package level class should be a public class, which is
      defined in it's own Java source file. Package protected or private outer
      classes must not be used, every use of these classes should be replaces
      by the use of either public outer classes or inner classes.</para>

      <para>Java source files must have the following ordering:<itemizedlist>
          <listitem>
            <para>Beginning comment</para>
          </listitem>

          <listitem>
            <para>Package and import statements</para>
          </listitem>

          <listitem>
            <para>Public Class or Interface declaration</para>
          </listitem>
        </itemizedlist></para>

      <para>All Java source files should be encoded using the ISO-8859-1
      encoding. Non-ASCII Unicode characters should be escaped.</para>

      <section>
        <title>Beginning Comments</title>

        <para>All source files must begin with a c-style comment that holds
        the copyright and licence information, the classname, original author
        and contributors and a ChangeLog covering the milestones in the file's
        development history.</para>

        <para>This header comment must always include a CVS-ID tag.</para>

        <para><programlisting>/**
 * ========================================
 * &lt;project-name&gt; : &lt;a short project description&gt;
 * ========================================
 * * Project Info: &lt;web site of the project&gt;
 * Project Lead: &lt;project maintainer(s)&gt;
 *
 * (C) Copyright 2000-2005, by &lt;copyright holder for the project or file&gt;.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * ---------
 * &lt;filename.java&gt;
 * ---------
 * (C) Copyright 2000-2005, by &lt;copyright holder for the project or file&gt;.
 * 
 * Original Author: &lt;name and email of the initial author of the class&gt;
 * Contributor(s): &lt;list of all contributors&gt;
 *
 * $Id: chapter1-styleguide.xml,v 1.1 2005/03/08 17:42:01 taqua Exp $
 *
 * Changes (from &lt;date of the first appearance in the project&gt;)
 * -------------------------
 * 08-Feb-2002 : &lt;what changed&gt;
 */</programlisting></para>
      </section>

      <section>
        <title>Package and Import Statements</title>

        <para>The first non-comment line of the file must be the package
        statement. No project class should be contained in the default
        package.</para>

        <para>The following package spaces should be used for the JFreeReport
        projects:<itemizedlist>
            <listitem>
              <para><code>org.jfree.report</code> for the JFreeReport core
              project</para>
            </listitem>

            <listitem>
              <para><code>org.jfree.report</code>.ext for the JFreeReport
              extension project</para>
            </listitem>

            <listitem>
              <para><code>org.jfree.pixie</code> for the Pixie image
              library</para>
            </listitem>

            <listitem>
              <para><code>org.jfree.report.dev</code> for the JFreeReport
              development tools</para>
            </listitem>
          </itemizedlist></para>

        <para>Package imports (*-imports) must not be used. This method of
        importing all classes of a certain package is dangerous, as it might
        cause naming conflicts between two classes with the same name but from
        different packages. Additionally, it is no longer obvious, which
        classes get used by a certain java source file, thus making it harder
        to track dependencies.</para>

        <para>All package names must be written in lowercase ASCII-characters.
        Although java allows almost any Unicode character in the names of
        packages as well as in class names, the correct representation of such
        names in the file system of the user and developers cannot be
        guaranteed for non-ASCII names. Therefore the safest bet is, to aviod
        such things alltogether.</para>

        <para>If the IDE used for development supports it, the import
        statements should be sorted alphabeticly in each block. Import
        statements for the java and javax packages should be written first,
        followed by a blank line and finally followed by all other
        imports.</para>

        <para>Example: <programlisting>package org.jfree.report;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.jfree.report.layout.BandLayoutManager;
import org.jfree.report.layout.StaticLayoutManager;
import org.jfree.report.style.BandDefaultStyleSheet;
import org.jfree.report.style.BandStyleKeys;
import org.jfree.report.style.ElementDefaultStyleSheet; </programlisting></para>
      </section>

      <section>
        <title>Public Class or Interface declaration</title>

        <para>Every Java source file must contain only one public outer scope
        class or interface declaration.</para>

        <para>Every class or interface declaration must be preceded by a
        JavaDoc class comment describing the purpose of the class. The
        documentation comment should contain examples on how to use that
        class, where ever it seem applicable. The JavaDoc @author tag is
        mandatory.</para>

        <para>The class documentation must be followed by a valid <code>public
        class</code> or <code>interface</code> declaration.</para>

        <para>If necessary, a non JavaDoc comment might follow immediatly
        after the class declaration, describing internal details of the
        implementation of this class.</para>

        <para>The order of the class members should be as follows.
        <orderedlist>
            <listitem>
              <para>Constant declarations (<code>public</code>,
              <code>protected</code> or <code>private static final</code>
              variables).</para>

              <para>Only immutable classes should be used as constant values.
              As only the reference to the object is declared to be final,
              object contents can always be modified, no matter whether an
              object h</para>
            </listitem>

            <listitem>
              <para>Inner classes.</para>

              <para>Inner classes should always be used in favor of annonymous
              inner classes. If possible, such classes should be static, as
              this greatly reduces the chance of creating memory leaks when
              passing these objects around. (All non-static inner classes hold
              an invisible reference to their outer class instance, and
              therefore the garbage collector cannot free the outer class
              unless all inner classes can be garbage collected.)</para>
            </listitem>

            <listitem>
              <para>Static member variables</para>

              <para>All non-final static member variables must be private. If
              necessary, create protected accessor methods for these
              variables. Static variables should be avoided, except for
              Singleton implementations, as such variables make it hard to
              trace bugs in a managed application (like Servlet or
              EJB-Containers).</para>

              <para>All access to such variables must be properly
              synchronized.</para>
            </listitem>

            <listitem>
              <para>Non-static member variables</para>

              <para>All member variables must be private. If you need to
              access these variables from a derived class, create protected
              accessor methods for them.</para>
            </listitem>

            <listitem>
              <para>Constructors</para>

              <para>Every class must declare at least one constructor. The
              default constructor should always be the first in the list of
              constructors, even if it is private.</para>

              <para>If the class is an utility class and does only contain
              static methods, then a private default constructor should be
              added. This prevents uncessary object creation of such
              classes.</para>
            </listitem>

            <listitem>
              <para>Methods</para>

              <para>The methods should be grouped by functionality rather than
              by visibility or name. The main goal should always be to make
              the source code as readable as possible.</para>
            </listitem>
          </orderedlist></para>
      </section>
    </section>

    <section>
      <title>Indentation and Braces</title>

      <para>To conserve space, two spaces should be used as unit of
      indentation. All indentations must be done with spaces. </para>

      <para>Tab characters must not be used. How Tab characters will be
      displayed primarily depends on the settings of the user's editor.
      Usually this leads to inconsistent indentation across the source files
      once two developers with different Tab-settings edit that document. To
      avoid such troubles at the first place, the use of Tab characters is
      forbidden. This way, all files look consistent, no matter whether the
      tab size is 2 or 8.</para>

      <section>
        <title>Forced line breaks</title>

        <para>On some constructs of the Java language, we require mandatory
        line breaks.</para>

        <para>First of all, and most important: Every statement should be
        placed on an own line. The old times, where code must be written in a
        way, that as less as possible paper was used for a programm are long
        time over. There is plenty of space in a Java source file, so there is
        no reason to press more than one statement on a single line of
        code.</para>

        <para>To increase the readabiltiy of the code, a blank line should be
        inserted after each structural element.</para>
      </section>

      <section>
        <title>Line wrapping</title>

        <para>When an overly long expression does not fit on a single line,
        break it according to these general principles:<itemizedlist>
            <listitem>
              <para>Break after a comma</para>
            </listitem>

            <listitem>
              <para>Break after an operator</para>
            </listitem>

            <listitem>
              <para>Prefer higher-level breaks to lower-level breaks.</para>
            </listitem>

            <listitem>
              <para>Align the new line with the beginning of the expression at
              the same level on the previous line.</para>
            </listitem>

            <listitem>
              <para>If the above rules lead to confusing code or to code
              that's squished up against the right margin, just indent 8
              spaces instead.</para>
            </listitem>
          </itemizedlist></para>

        <para>When ever possible, line breaks within expressions should be
        avoided. If the expression is used in an assignment and the right
        value of the assignment would fit on the next line, the linebreak
        should be inserted after the assignment operator.</para>

        <para>But after all, the best way to handle these cases, is to avoid
        them alltogether. Overly long lines of code make your source code hard
        to read and can be usually split into several separate statements.
        Introduce local variables to split your code or to compute complex
        parameters. This will greatly increase the readability of the source
        code. </para>

        <para>The following keywords must always be placed on a new line:
        <itemizedlist>
            <listitem>
              <para>else</para>

              <para>Note: An else followed immediatly by an if, can be kept on
              the same line as the if statement.</para>
            </listitem>

            <listitem>
              <para>while</para>
            </listitem>

            <listitem>
              <para>do</para>
            </listitem>

            <listitem>
              <para>try</para>
            </listitem>

            <listitem>
              <para>catch</para>
            </listitem>

            <listitem>
              <para>finally</para>
            </listitem>
          </itemizedlist></para>
      </section>

      <section>
        <title>Placement of Braces</title>

        <para>All curly braces should be placed at the beginning of the next
        line. The braces itself should have the same indention as their
        preceding statement. All statements inside the curly braces must be
        indented by two more spaces than the statements outside the braces.
        The closing brace must be at the same horizontal position as the
        corresponding opening brace.</para>

        <para>All code blocks must be held in curly braces, even if it is just
        a single line of an if, for or while statement.</para>

        <para>A curly brace must always be the only non-whitespace character
        on the line.</para>

        <para>Using a single line for every curly brace makes it harder to
        overlook these characters and greatly increase the readability of the
        source code. The structure of even deeply nested code can be
        recognized by a short look at it. This way, it is easy to identify the
        blocks of code of a certain method. Having braces around all of these
        code blocks makes it easier to add statements without accidentally
        introducing bugs due to forgetting to add these braces.</para>
      </section>

      <section>
        <title>Example</title>

        <para>Here is some properly aligned example code that shows, how to
        apply the above rules:<programlisting>
public class Foo
{
  private class InnerClass 
        implements I1, I2
  {
    public void bar ()
            throws E1, E2
    {
    }
  }

  public void foo (boolean longNamedVarA, 
                   int longNamedVarB,
                   int longNamedVarC, 
                   int longNamedVarD)
  {
    do
    {
      try
      {
        if (longNamedVarB &gt; 0)
        {
          int someVariable = longNamedVarA ?
                  longNamedVarC : longNamedVarD;
        }
        else if (longNamedVarB &lt; 0)
        {
          int someVariable = 
               (longNamedVarC + longNamedVarD);
          someVariable = longNamedVarB =
                         longNamedVarC + longNamedVarD;
        }
        else
        {
          for (int i = 0; i &lt; 5; i++)
          {
            doSomething(i);
          }
        }
        switch (a)
        {
          case 0:
          {
            doCase0();
            break;
          }
          default:
          {
            doDefault();
          }
        }
      }
      catch (Exception e)
      {
        processException(e.getMessage(),
                longNamedVarB + longNamedVarC, 
                longNamedVarD, longNamedVarA);
      }
      finally
      {
        processFinally();
      }
    }
    while (true);

    if (2 &lt; 3)
    {
      return;
    }

    if (3 &lt; 4)
    {
      return;
    }
    
    int x = 0;
    do
    {
      x++
    }
    while (x &lt; 10000);

    x = 0;
    while (x &lt; 50000)
    {
      x++;
    }

    for (int i = 0; i &lt; 5; i++)
    {
      System.out.println(i);
    }
  }
}</programlisting></para>
      </section>
    </section>

    <section>
      <title>Comments</title>

      <para>All source code should be commented.</para>

      <para>Java offers several types of comments. The most noticable comments
      are the JavaDoc comments ( /** .. */). The other ones are the line
      comments (//) and the C-style comments (/* .. */). The later comment
      types should be used to document the implementation and design decisions
      leading to that implementation.</para>

      <section>
        <title>JavaDoc comments</title>

        <para>We require valid and complete JavaDoc comments for every class,
        method and member variable of the source code.</para>

        <para>All classes must have at least a short documentary comment
        describing the purpose of the class. An @author tag is required for
        every top level class. For inner classes, the it is assumed, that the
        author of the top level class also wrote the inner class.</para>

        <para>When applicable, the documentation should contain a textual
        description on how and where to use that class and how this class fits
        into the big picture. Example code is always a good addition to
        clarify the comments.</para>

        <para>Methods must at least document their parameters, exceptions and
        return values using the corresponding JavaDoc tags. For every object
        parameter, it should be documented, whether null values are allowed.
        Runtime exceptions, which are known to be thrown by that method should
        also be documented in the JavaDoc comment (together with the condition
        that might trigger the exception).</para>

        <para>The methods JavaDoc documentation should not contain
        implementation details, except this particular knowledge is a
        requirement to successfully use the method. Be aware, that this is
        almost always an indication for a design error. It should be
        considered to refactor such methods or classes to clarify that
        problematic case.</para>

        <para>All member variables must have at least a short comment
        documenting their purpose.</para>
      </section>

      <section>
        <title>Implementation comments</title>

        <para>Implementation comments should always be added to the code where
        ever it increases the readability of the code. </para>
      </section>
    </section>

    <section>
      <title>Declarations</title>

      <section>
        <title>Class and Interface Declarations</title>

        <para>Top level classes must always be declared as public classes. The
        package protected access level must never be used. Package protected
        classes cannot be used outside the package, therefore they cannot be
        used or extended from an foreign implementor. The package protected
        access level leaves the classes open to be abused by unrelated classes
        from the same package. It is better to either lock down the class
        using the private modifier or to open it to all child classes by using
        the protected modifier. </para>

        <para>Methods declared in interfaces must be explicitly marked by the
        keyword public. </para>
      </section>

      <section>
        <title>Variables Declarations</title>

        <para>As a general rule, there should be only one variable declaration
        per line.</para>

        <para>Class and member variables must always have an explicit access
        level modifier. The use of the package protected access level is not
        allowed in any code conforming to this styleguide. Variables which are
        not declared 'static final' must always have the private access level.
        There is no sane reason to allow any other code to modify the internal
        state of a class. If it should be allowed to modify the value of a
        class or member variable, accessor methods should be provided for that
        purpose.</para>

        <para>The visibility of variables should be as little as possible.
        This leads to the rule, that variables should be declared whenever
        they are used. Declaring variables at the beginning of a method, as
        done in C or Pascal leads to confusing code, as it is hard to see,
        where in a method such a variable might have been already used. If a
        variable is only used in a certain code block, make sure, that it is
        declared in that block only. </para>

        <para>Variables, which are assigned only once in their lifetime should
        be declared as final variables. This way, it will be easier for the
        compiler to generate optimized code. An other positive side effect is,
        that you can always be sure about the value of that particular
        variable, which in return leads to better and easily understandable
        code.</para>

        <para>Non-static Member variables should not be initialized in their
        declaring statement. If the initial value of a variable differs from
        the default value for that variable (false for boolean variables, zero
        for numeric variables and null for object references), the variable
        should be initialized in the constructor(s).</para>
      </section>
    </section>

    <section>
      <title>Naming Conventions</title>

      <para>Generally, identifiers in your programm should be speaking
      identifiers. A reader of your code should be able to recognize the
      purpose of the variable or method by the its name. A name should be
      preferably short, but long enough to clearly describe the purpose
      without being either chatty nor cryptic. Choosing the right name is an
      art, but always worth the effort, as it (like nothing else) increases
      the readabilty and maintainabilty of the source code.</para>

      <para>For the sake of compatibility with non-unicode systems, package
      and class names must be restricted to ASCII characters only. To avoid
      encoding troubles, we also require, that all method and variable names
      must be choosen in a way that only ASCII characters get used.</para>

      <section>
        <title>Package Names</title>

        <para>The prefix of a unique package name is always written in
        all-lowercase ASCII letters and should be one of the top-level domain
        names, currently com, edu, gov, mil, net, org, or one of the English
        two-letter codes identifying countries as specified in ISO Standard
        3166, 1981.</para>

        <para>Subsequent components of the package name vary according to an
        organization's own internal naming conventions. Such conventions might
        specify that certain directory name components be division,
        department, project, machine, or login names.</para>

        <para>All package names must be in lower case.</para>
      </section>

      <section>
        <title>Class and Interface Names</title>

        <para>Class names should be nouns, in mixed case with the first letter
        of each internal word capitalized. Try to keep your class names simple
        and descriptive. Use whole words-avoid acronyms and abbreviations
        (unless the abbreviation is much more widely used than the long form,
        such as URL or HTML).</para>
      </section>

      <section>
        <title>Method Names</title>

        <para>Names for methods should begin with an english verb (as methods
        usually 'do' something) possibly extended by a noun or adjective. The
        name of the method should be speaking, so that the name itself gives a
        correct indication on what the method will do. Examples for a method
        that computes a layout would be '<code>compute</code>',
        '<code>computeLayout</code> or <code>computeReportLayout.</code> Which
        of these names would be the best depends on the context where it was
        declared.</para>

        <para>Method names should be mixed case with the first letter
        lowercase, with the first letter of each internal word capitalized.
        Underscore characters must not be used.</para>
      </section>

      <section>
        <title>Variable Names</title>

        <para>Except for constants, all instance, class, and class variables
        are in mixed case with a lowercase first letter. Internal words start
        with capital letters. Variable names should not start with underscore
        _ or dollar sign $ characters, even though both are allowed.</para>

        <para>When choosing identifiers for your programm, you should use full
        english descriptions for names. Avoid using abbreviations. Use names
        like <code>firstName</code>, <code>lastName</code>, and
        <code>middleInitial</code> rather than the shorter versions
        <code>fName</code>, <code>lName</code>, and <code>mi</code>.</para>

        <para>As a thumb rule, names for variables should be an english noun,
        possibly preceeded by an adjective. The name should match the purpose
        of the member variable. Examples for such names would be
        <code>limit</code>, <code>upperLimit</code> or
        <code>lowerLimit</code>.</para>

        <para>One-character variable names should be avoided except for
        temporary "throwaway" variables. Common names for temporary variables
        are i, j, k, m, and n for integers; c, d, and e for characters.</para>
      </section>

      <section>
        <title>Constants</title>

        <para>The names of variables declared class constants should be all
        uppercase with words separated by underscores ("_"). </para>
      </section>
    </section>

    <section>
      <title>Programming Practices</title>

      <para></para>
    </section>
  </section>

  <section>
    <title>Design decisions</title>

    <para></para>
  </section>
</chapter>