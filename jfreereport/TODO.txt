Label printing (as seen in the card-demo)

0.8.5:
  * Implement function sets (see #note-1030630)
! * pluggable input support (WMF, SVG etc)
+ * Multi-Page definition, 1 pageformat for all pages
    multiple pages (x and y),
    a defined max width and max height (may be less than the given log page size)
    a global page header/footer for the complete log page
    several private page header/footers for every physical page
+ * Implement JFreeChart adapter and Barcode stuff
  * Formated Text support for printing (RTF, HTML)
  * Allow access to the last datarow to make reporting results available outside.
  * Simple parser writer and comment handler ...
  * Expand Tab-Stops
  
0.8.6:
  * Columns
  * PageBreaks within a band
  * Sub-Reporting
  * Smarter PageLayouting:
    - FlowLayouter, LayoutAgents
    - ContentDistribution over multiple physical pages
  * more BandLayoutManagers for smarter layouting
    - FlowLayout
    - BoxLayout
    - GridBagLayout
  * Better Support for international Fonts in the PDF-Target
    - parse TTF-Files for supported Charsets/Unicode-Ranges
    - automaticly adjust encoding if nessesary
  * export to OpenOffice
  * PDF: Fast Web View, PDF 1.2

general:
  * Start a poll what functions are needed ...

> 0.9.0:
  * create a RPC-Capable report preview so that reports are processed
    on the server and only the minimum of data is sent to the client ...


-----------------------------------------------------------------------------
What changed:

* Propagate output-complete events
* pageable output targets:
  - report state list is now internal and no longer available outside
  - plaintext target complete rewrite (thanks Michael Tennes)
  - DummyTargets are no longer used (MetaBands are used instead)
* table tagets: Complete rewrite
  - html target: inline-html generation (jsp:include support)
  - RTF target fixed and now considered stable (except the image support)
  - Excel-Target: Alternate formats for Date and NumberFields
* ResourceBundles are property files now
* Boot process integrates into the jcommon boot system
* Function use bean-interface for configuration; so the explicit use of
  setProperties (..) has been removed
* PageDefinition object instead of the pageformat
  - ReportStates allow access to the current page definition object
  - the page definition is now the only source for the page format;
    all constructors accepting page formats have been removed
* ReportConnectable filter instead of DataRowConnectable to allow
  access to the report definition during the data preprocessing
  (this allows the report to bind a certain resource bundle for the
  localization (to be implemented))
* Functions and expressions are now unified, JFreeReport objects only
  know about expressions.
* Root-Level Bands can now have a fixed start position on the page.
* TextElements bind the encoding; so multiple encodings can be used
  within a single PDF document
* The ImageReference class has been replaced by an interface
* Resourcebundles are no longer loaded directly. The ResourceBundleFactory
  from the JFreeReport object is used as source now.
* Horizontal lines no longer use the x1==x2; y1==y2 form of definition.
  They now use the relative coordinates like all other elements (width="100%")
* LayoutManagerCache now uses the Element's InstanceID as key for the cache
  This increases the performance a lot (HugeReport6: from 84 sec to 35 secs)
  Elements that will have their sizes or position be modified by the user must
  be marked uncachable by using the stylekey ELEMENT_LAYOUT_CACHABLE set to 'false'.
* Images and Drawables are now loaded using a separate factory, so that Pixie
  is no longer a hardcoded requirement
* The PDF target caches the used images
* Some minor performance improvements in the stylekey handling


To be implemented: 
  Simple parser: Support for the new features
  Text line breaking optimizations
  