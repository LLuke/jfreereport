Label printing (as seen in the card-demo)

0.8.5:
  * Implement function sets (see #note-1030630)
! * pluggable input support (WMF, SVG etc)
+ * Multi-Page definition, 1 pageformat for all pages
    multiple pages (x and y),
    a defined max width and max height (may be less than the given log page size)
    a global page header/footer for the complete log page
    several private page header/footers for every physical page
+ * Implement JFreeChart adapter and Barcode stuff
  * Formated Text support for printing (RTF, HTML)
  * Allow access to the last datarow to make reporting results available outside.
  * Simple parser writer and comment handler ...
  * Expand Tab-Stops
  
0.8.6:
  * Columns
  * PageBreaks within a band
  * Sub-Reporting
  * Smarter PageLayouting:
    - FlowLayouter, LayoutAgents
    - ContentDistribution over multiple physical pages
  * more BandLayoutManagers for smarter layouting
    - FlowLayout
    - BoxLayout
    - GridBagLayout
  * Better Support for international Fonts in the PDF-Target
    - parse TTF-Files for supported Charsets/Unicode-Ranges
    - automaticly adjust encoding if nessesary
  * export to OpenOffice
  * PDF: Fast Web View, PDF 1.2

general:
  * Start a poll what functions are needed ...

> 0.9.0:
  * create a RPC-Capable report preview so that reports are processed
    on the server and only the minimum of data is sent to the client ...


-----------------------------------------------------------------------------
What changed:
* output-complete events are generated by the export targets
* General: All deprecated (and many non-deprecated but now obsolete)
  methods have been removed.
* Pageable output targets:
  - report state list is now internal and no longer available outside
  - plaintext target complete rewrite (thanks Michael Tennes for all the
    debugging, patience and tips and tricks)
    This implementation has now a complete ESC/P printer driver and makes
    sure that your epson compatible matrix printers will have some happy days
    in the Java world.
  - DummyTargets are no longer used (MetaBands are used instead)
* Table tagets: Complete rewrite
  - html target: html body fragment generation (for jsp:include support)
  - RTF target fixed and now considered stable (except for the image support)
  - Excel-Target: Alternate formats for Date and NumberFields can be defined
* ResourceBundles have been converted to property files for better
  maintainability.
* Boot process integrates into the jcommon boot system; a new class
  (JFreeReportBoot) provides the boot loader for the library.
* Function use the bean-interface for configuration; so the explicit use of
  setProperties (..) has been removed in favor of the get/set methods of the
  Bean-API.
* PageDefinition object are used instead of the AWT-pageformat objects.
  The support for larger than 1x1 page-set is untested and should be considered
  experimental for now.
  - ReportStates allow access to the current page definition object
  - the page definition is now the only source for the page format;
    all constructors accepting page formats have been removed
  - The ReportProperty "report.pageformat" should not be used anymore.
* ReportConnectable interface replaces the DataRowConnectable to allow
  access to the report definition during the data preprocessing
  (this allows the report to bind a certain resource bundle for the
  localization [using a ResourceBundleFactory implementation])
* Resourcebundles for the ResourceFields are no longer loaded directly.
  The ResourceBundleFactory from the JFreeReport object is used as source now.
* Function and expression handling is now unified. The distinction between
  the various function types is now classified as an internal secret. For
  the users, functions should be not more than a special kind of expressions.
* Root-Level Bands can now have a fixed start position on the page. This solves
  the various requests for the report or group footers printed at the bottom of
  the page. Be aware that the Layout-Engine does will abort the report
  generation if the fixed footer does not fit completly on the current page.
* TextElements bind the encoding; multiple encodings can be used within a
  single PDF document (that feature has been silently implemented in the later
  0.8.4 versions, and is now ready to use)
* The ImageReference class has been replaced by an interface. This way the
  Pixie-library for the WMF support is no longer hardcoded in the ImageReference
  class.
* Images and Drawables are now loaded using a separate factory, so that Pixie
  is no longer a hardcoded requirement
* Horizontal lines no longer use the x1==x2; y1==y2 form of definition.
  They now use the relative coordinates like all other elements (width="100%")
  Special factory methods have been added to the StaticShapeElementFactory so
  that vertical and horizontal lines can be generated more easily.
* LayoutManagerCache now uses the Element's InstanceID as key for the cache
  This increases the performance a lot (HugeReport6: from 84 sec to 35 secs)
  Elements that will have their sizes or position be modified by the user must
  be marked uncachable by using the stylekey ELEMENT_LAYOUT_CACHABLE set to
  'false'.
* The PDF target caches the used images. It also does no longer try to encode
  all images as PNG files - this was completly unnecessay and just stupid.
* Some minor performance improvements in the stylekey handling.
* A userdefined configuration can be added to the ReportConfiguration. This way
  JFreeReport can use other frameworks as configuration source.
  (Based on a suggestion by 'bitstorm')
* The parsers can be used to configure an predefined JFreeReport instance. This
  makes it possible to supply an own JFreeReport implementation to the parser.
* The PageFinished event is now handled correctly. This catches all pagebreak
  related bugs.
* MessageFormatElements (contribution by Joerg Schaible)
* PageOfPagesFunction (contributed by Joerg Schaible)
* All Preview.. Components now use a factory method
  "protected PreviewProxyBase createPreviewProxyBase ()"
  to create the ProxyBaseImplementation. This should make it easier to replace
  the PreviewProxyBase with a custom implementation.
* Support for the ImageIO API of JDK1.4 has been added to JFreeReport-Ext.
  As soon as JFreeReport-Ext is on the classpath, the resource factory will start
  to use these new image loaders.
* Anchors for the PDF- and HTML-Targets.
* Hyperlinks have been added for the HTML and PDF targets.
* The ElementStyleSheets have a cleaner semantic now. There are two classes
  of stylesheets, the ones assigned directly to the elements and bands and the
  global ones, which were created and managed by the StyleSheetCollection.
  Only on default parent can exist, and one cascading parent, which links the elements
  to its parent bands. Bands do no longer have 2 stylesheets, they inherit their
  primary stylesheet to their parents. This way, the inheritance change can go from
  the root level band to the last child, allowing the same inheritance as found in HTML.
  The BandDefaults have been removed.
* BarCode stuff ..
* Simple XML parser: Support for the new features has been added
  Support for Include-files added to allow to reuse common parts of the report
  definitions (like report header/footer, page header/footer, or everything else)

To be implemented before the release is ready:
* Redesign the dialogs to follow the common usability guides
* Bug: ProgressBar in the RepaginationProgressDialog is not working as expected.
* Implement a ResourceNumberField, ResourceDateField and ResourceMessageField
  for completly localizable reports.
* Verify the page-spanning printing
* Add support for rotated text
* Verify the PlainText-Output target

What will be impossible:
* The 'keep-together' feature is not implementable with the old engine.
* Pagebreaks within bands - this needs a fundamental change, which is breeding 
  in the 'libLayout' subproject.
* Subreports - once again the old engine would die while trying to solve that 
  problem 

Known bugs:
* Non-Area shapes, which are not instances of Line2D cannot be
  drawn right now. The clipping fails for these shapes. [Not fixable yet]
