<?xml version="1.0" encoding="iso-8859-1"?>
<templates context="beanDescriptor">
/**
 * AutoGenerated file
 */
package <print var="beanDescriptor.packageName"/>;

import java.awt.Image;
import java.beans.BeanInfo;
import java.beans.EventSetDescriptor;
import java.beans.MethodDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.IntrospectionException;

public class <print var="beanInfoName"/> implements BeanInfo
{
  private int defaultEventIndex;
  private int defaultPropertyIndex;
  private Image smallMonochromeIcon;
  private Image smallColorIcon;
  private Image largeMonochromeIcon;
  private Image largeColorIcon;
  private BeanDescriptor beanDescriptor;
  private BeanInfo[] additionalBeanInfo;
  private EventSetDescriptor[] eventSetDescriptors;
  private MethodDescriptor[] methodDescriptors;
  private PropertyDescriptor[] propertyDescriptors;

  /**
   * DefaultConstructor.
   */
  public <print var="beanInfoName"/> () throws IntrospectionException
  {
    BeanInfo superClassInfo =
      Introspector.getBeanInfo (<print var="beanDescriptor.beanClass"/>.class.getSuperClass(),
                                <print var="beanDescriptor.stopClass"/>.class);

    defaultEventIndex = <print var="defaultEventIndex"/>;
    defaultPropertyIndex = <print var="defaultPropertyIndex"/>;
    smallMonochromeIcon = <print var="smallMonochromeIcon"/>;
    smallColorIcon = <print var="smallColorIcon"/>;
    largeMonochromeIcon = <print var="largeMonochromeIcon"/>;
    largeColorIcon = <print var="largeColorIcon"/>;

    beanDescriptor = new BeanDescriptor (<print var="beanDescriptor.beanClass"/>.class, <print var="beanDescriptor.customizerClass"/>);
    beanDescriptor.setExpert(<print var="beanDescriptor.expert"/>);
    beanDescriptor.setHidden(<print var="beanDescriptor.hidden"/>);
    beanDescriptor.setPreferred(<print var="beanDescriptor.preferred"/>);
    beanDescriptor.setDisplayName(<print var="beanDescriptor.displayName" style="quoted"/>);
    beanDescriptor.setName(<print var="beanDescriptor.name" style="quoted"/>);
    beanDescriptor.setShortDescription(<print var="beanDescriptor.shortDescription" style="quoted"/>);

    <notEmpty element="eventSetDescriptors">
    ArrayList eventDescriptorList = new ArrayList();
    eventDescriptorList.addAll(createEventSet());
    EventSetDescriptor[] superClassEventDescriptors = null;
    if (superClassInfo != null)
    {
      superClassEventDescriptors = superClassInfo.getEventSetDescriptors();
    }
    if (superClassEventDescriptors != null)
    {
      eventDescriptorList.addAll(Arrays.asList();
    }
    eventDescriptors = (EventDescriptor[])
      eventDescriptorList.toArray(new EventDescriptor[eventDescriptors.size()]);
    </notEmpty>

    <notEmpty element="propertyDescriptors">
    ArrayList propertyList = new ArrayList();
    propertyList.addAll(createPropertySet());
    PropertyDescriptor[] superClassPropertyDescriptors = null;
    if (superClassInfo != null)
    {
       superClassPropertyDescriptors = superClassInfo.getPropertyDescriptors();
    }
    if (superClassPropertyDescriptors != null)
    {
      propertyList.addAll(Arrays.asList();
    }
    propertyDescriptors = (PropertyDescriptor[])
      propertyList.toArray(new PropertyDescriptor[propertyList.size()]);
    </notEmpty>
  }

  public int getDefaultEventIndex()
  {
    return defaultEventIndex;
  }

  public int getDefaultPropertyIndex()
  {
    return defaultPropertyIndex;
  }

  public Image getSmallMonochromeIcon()
  {
    return smallMonochromeIcon;
  }

  public Image getSmallColorIcon()
  {
    return smallColorIcon;
  }

  public Image getLargeMonochromeIcon()
  {
    return largeMonochromeIcon;
  }

  public Image getLargeColorIcon()
  {
    return largeColorIcon;
  }

  public GeneratorBeanDescriptor getBeanDescriptor()
  {
    return beanDescriptor;
  }

  public BeanInfo[] getAdditionalBeanInfo()
  {
    return additionalBeanInfo;
  }

  public EventSetDescriptor[] getEventSetDescriptors()
  {
    return eventSetDescriptors;
  }

  public MethodDescriptor[] getMethodDescriptors()
  {
    return methodDescriptors;
  }

  public PropertyDescriptor[] getPropertyDescriptors()
  {
    return propertyDescriptors;
  }

  public Image getIcon(int iconKind)
  {
    if (iconKind == BeanInfo.ICON_MONO_16x16)
    {
      return getSmallMonochromeIcon();
    }
    if (iconKind == BeanInfo.ICON_MONO_32x32)
    {
      return getLargeMonochromeIcon();
    }
    if (iconKind == BeanInfo.ICON_COLOR_16x16)
    {
      return getSmallColorIcon();
    }
    if (iconKind == BeanInfo.ICON_COLOR_32x32)
    {
      return getLargeColorIcon();
    }
    return null;
  }

  private List createEventSet ()
  {
    ArrayList list = new ArrayList(<print var="eventSetDescriptorsCount"/>);
    EventSetDescriptor esd;
    <foreach element="eventSetDescriptors" as="esd">
    esd = new EventSetDescriptor(<print var="beanDescriptor.beanClass"/>.class,
         <print bean="esd" var="name" style="quoted" />,
         <print bean="esd" var="listenerType"/>.class,
         new Object[] {
           <foreach bean="esd" element="listenerMethods" as="method"><print bean="method" style="quoted" />,</foreach>
         },
         <print bean="esd" var="addMethod" style="quoted" />,
         <print bean="esd" var="removeMethod" style="quoted" />);

    esd.setExpert(<print bean="esd" var="expert"/>);
    esd.setHidden(<print bean="esd" var="hidden"/>);
    esd.setPreferred(<print bean="esd" var="preferred"/>);
    esd.setDisplayName(<print bean="esd" var="displayName" style="quoted"/>);
    esd.setShortDescription(<print bean="esd" var="shortDescription" style="quoted"/>);
    list.add (esd);
    </foreach>
    return list;
  }

  private List createPropertySet ()
  {
    ArrayList list = new ArrayList(<print var="propertyDescriptorsCount"/>);
    PropertyDescriptor pd;
    <foreach element="propertyDescriptors" as="esd">
    <equals bean="esd" var="indexed" value="false">
    pd = new PropertyDescriptor(<print bean="esd" var="name" style="quoted" />,
         <print var="beanDescriptor.beanClass"/>.class,
         <print bean="esd" var="readMethod" style="quoted" />,
         <print bean="esd" var="writeMethod" style="quoted" />);
    </equals>
    <equals bean="esd" var="indexed" value="true">
    pd = new IndexedPropertyDescriptor(<print bean="esd" var="name" style="quoted" />,
         <print var="beanDescriptor.beanClass"/>.class,
         <print bean="esd" var="readMethod" style="quoted" />,
         <print bean="esd" var="writeMethod" style="quoted" />,
         <print bean="esd" var="indexedReadMethod" style="quoted" />,
         <print bean="esd" var="indexedWriteMethod" style="quoted" />);
    </equals>
    pd.setBound(<print bean="esd" var="bound"/>);
    pd.setConstrained(<print bean="esd" var="constrained"/>);
    pd.setExpert(<print bean="esd" var="expert"/>);
    pd.setHidden(<print bean="esd" var="hidden"/>);
    pd.setPreferred(<print bean="esd" var="preferred"/>);
    pd.setDisplayName(<print bean="esd" var="displayName" style="quoted"/>);
    pd.setShortDescription(<print bean="esd" var="shortDescription" style="quoted"/>);
    list.add (pd);
    </foreach>
    return list;
  }
}

</templates>