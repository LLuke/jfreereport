/*
 * File is generated by 'Unit Tests Generator' developed under
 * 'Web Test Tools' project at http://sf.net/projects/wttools/
 * Copyright (C) 2001 "Artur Hefczyc" <kobit@users.sourceforge.net>
 * to all 'Web Test Tools' subprojects.
 *
 * No rigths to files and no responsibility for code generated
 * by this tool are belonged to author of 'unittestsgen' utility.
 *
 * $Id: TextElementTestCase.java,v 1.2 2002/07/10 19:22:47 taqua Exp $
 * $Author: taqua $
 * $Date: 2002/07/10 19:22:47 $
 */
package com.jrefinery.report.ext.junit.base;

import com.jrefinery.report.TextElement;
import com.jrefinery.report.ItemBand;
import com.jrefinery.report.filter.DataSource;
import com.jrefinery.report.filter.StaticDataSource;
import com.jrefinery.report.targets.OutputTarget;
import com.jrefinery.report.targets.G2OutputTarget;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.awt.AWTEvent;
import java.awt.Toolkit;
import java.awt.Font;
import java.awt.print.PageFormat;
import java.awt.event.AWTEventListener;
import java.awt.event.WindowEvent;

/**
 * File <code>TextElementTestCase.java</code> is automaticaly generated by
 * 'unittestsgen' application. Code generator is created for java
 * sources and for 'junit' package by "Artur Hefczyc"
 * <kobit@users.sourceforge.net><br/>
 * You should fulfil test methods with proper code for testing
 * purpose. All methods where you should put your code are below and
 * their names starts with 'test'.<br/>
 * You can run unit tests in many ways, however prefered are:
 * <ul>
 *   <li>Run tests for one class only, for example for this class you
 *       can run tests with command:
 *     <pre>
 *       java -cp "jar/thisjarfile.jar;lib/junit.jar" com.jrefinery.report.TextElementTestCase
 *     </pre>
 *   </li>
 *   <li>Run tests for all classes in one command call. Code generator
 *       creates also <code>com.jrefinery.report.ext.junit.TestAll.class</code> which runs all
 *       available tests:
 *     <pre>
 *       java -cp "jar/thisjarfile.jar;lib/junit.jar" com.jrefinery.report.ext.junit.TestAll
 *     </pre>
 *   </li>
 *   <li>But the most prefered way is to run all tests from
 *     <em>Ant</em> just after compilation process finished.<br/>
 *     To do it. You need:
 *     <ol>
 *       <li>Ant package from
 *         <a href="http://jakarta.apache.org/">Ant</a>
 *       </li>
 *       <li>JUnit package from
 *         <a href="http://www.junit.org/">JUnit</a>
 *       </li>
 *       <li>Put some code in your <code>build.xml</code> file
 *         to tell Ant how to test your package. Sample code for
 *         Ant's <code>build.xml</code> you can find in created file:
 *         <code>sample-junit-build.xml</code>. And remember to have
 *         <code>junit.jar</code> in CLASSPATH <b>before</b> you run Ant.
 *         To generate reports by ant you must have <code>xalan.jar</code>
 *         in your <code>ANT_HOME/lib/</code> directory.
 *       </li>
 *     </ol>
 *   </li>
 * </ul>
 */
public class TextElementTestCase extends TestCase
{
  /**
   * Instance of tested class.
   */
  protected TextElement varTextElement;

  /**
   * Public constructor for creating testing class.
   */
  public TextElementTestCase (String name)
  {
    super (name);
  } // end of TextElementTestCase(String name)

  /**
   * This main method is used for run tests for this class only
   * from command line.
   */
  public static void main (String[] args)
  {
    junit.textui.TestRunner.run (suite ());
  } // end of main(Stringp[] args)

  /**
   * This method is called every time before particular test execution.
   * It creates new instance of tested class and it can perform some more
   * actions which are necessary for performs tests.
   */
  protected void setUp ()
  {
    varTextElement = new TextElement ();
  } // end of setUp()

  /**
   * Returns all tests which should be performed for testing class.
   * By default it returns only name of testing class. Instance of this
   * is then created with its constructor.
   */
  public static Test suite ()
  {
    return new TestSuite (TextElementTestCase.class);
  } // end of suite()

  /**
   * Method for testing how works original method:
   * void draw( ... )
   * from tested class
   */
  public void testDraw320600891290237458 ()
  {
    try
    {
      G2OutputTarget g2target = new G2OutputTarget(G2OutputTarget.createEmptyGraphics(), new PageFormat());
      varTextElement.draw(g2target, new ItemBand());
    }
    catch (Exception e)
    {
    }

  } // end of testDraw320600891290237458( ... )

  /**
   * Method for testing how works original method:
   * int getAlignment()
   * from tested class
   */
  public void testGetAlignment ()
  {
    try
    {
      varTextElement.setAlignment ((int) -2147483648);
      assertTrue("No exception for illegal Argument", false);
    }
    catch (IllegalArgumentException iarg)
    {
    }

    varTextElement.setAlignment(TextElement.CENTER);
    assertEquals(TextElement.CENTER, varTextElement.getAlignment());
    varTextElement.setAlignment(TextElement.LEFT);
    assertEquals(TextElement.LEFT, varTextElement.getAlignment());
    varTextElement.setAlignment(TextElement.RIGHT);
    assertEquals(TextElement.RIGHT, varTextElement.getAlignment());

  } // end of testGetAlignment()

  /**
   * Method for testing how works original method:
   * java.awt.Font getFont(com.jrefinery.report.Band)
   * from tested class
   */
  public void testGetFont290237458 ()
  {
    ItemBand band = new ItemBand();
    varTextElement.setFont (null);
    assertEquals (band.getDefaultFont(), varTextElement.getFont (band));

    Font font = new Font ("Serif", 10, Font.PLAIN);
    varTextElement.setFont (font);
    assertEquals (font, varTextElement.getFont (band));

  } // end of testGetFont290237458(com.jrefinery.report.Band)

  /**
   * Method for testing how works original method:
   * java.awt.Font getFont()
   * from tested class
   */
  public void testGetFont ()
  {

    varTextElement.setFont (null);
    assertEquals (null, varTextElement.getFont ());

    Font font = new Font ("Serif", 10, Font.PLAIN);
    varTextElement.setFont (font);
    assertEquals (font, varTextElement.getFont ());

  } // end of testGetFont()

  /**
   * Method for testing how works original method:
   * java.lang.String getFormattedText()
   * from tested class
   */
  public void testGetFormattedText ()
  {
    DataSource org = varTextElement.getDataSource();
    Object oldVal = varTextElement.getFormattedText();

    StaticDataSource ds = new StaticDataSource();
    varTextElement.setDataSource(ds);
    assertEquals(varTextElement.getFormattedText(), varTextElement.getNullString());
    ds.setValue("aString");
    assertEquals(varTextElement.getFormattedText(), "aString");

    varTextElement.setDataSource(org);
    assertEquals(oldVal, varTextElement.getFormattedText());
  } // end of testGetFormattedText()

  /**
   * Method for testing how works original method:
   * java.lang.String getNullString()
   * from tested class
   */
  public void testGetNullString ()
  {
    varTextElement.setNullString ((String) null);
    // default val if nullstring is <null> is "-"
    assertEquals ((String) "-", varTextElement.getNullString ());
    varTextElement.setNullString ((String) "");
    assertEquals ((String) "", varTextElement.getNullString ());
    varTextElement.setNullString ((String) "\u0000");
    assertEquals ((String) "\u0000", varTextElement.getNullString ());
    varTextElement.setNullString ((String) " ");
    assertEquals ((String) " ", varTextElement.getNullString ());
    varTextElement.setNullString ((String) "\n");
    assertEquals ((String) "\n", varTextElement.getNullString ());
  } // end of testGetNullString()

  /**
   * Method for testing how works original method:
   * java.lang.Object getValue()
   * from tested class
   */
  public void testGetValue ()
  {
    DataSource org = varTextElement.getDataSource();
    Object oldVal = varTextElement.getValue();

    StaticDataSource ds = new StaticDataSource();
    varTextElement.setDataSource(ds);
    assertEquals(varTextElement.getValue(), varTextElement.getValue());
    ds.setValue("aString");
    assertEquals(varTextElement.getValue(), "aString");

    varTextElement.setDataSource(org);
    assertEquals(oldVal, varTextElement.getValue());
  } // end of testGetValue()

  /**
   * Method for testing how works original method:
   * boolean isStrikethrough()
   * from tested class
   */
  public void testIsStrikethrough ()
  {
    varTextElement.setStrikethrough(false);
    assertEquals(false, varTextElement.isStrikethrough());
    varTextElement.setStrikethrough(true);
    assertEquals(true, varTextElement.isStrikethrough());
  } // end of testIsStrikethrough()

  /**
   * Method for testing how works original method:
   * boolean isUnderlined()
   * from tested class
   */
  public void testIsUnderlined ()
  {
    varTextElement.setUnderlined(false);
    assertEquals(false, varTextElement.isUnderlined());
    varTextElement.setUnderlined(true);
    assertEquals(true, varTextElement.isUnderlined());
  } // end of testIsUnderlined()

  /**
   * Method for testing how works original method:
   * void setDataSource(com.jrefinery.report.filter.DataSource)
   * from tested class
   */
  public void testSetDataSource678066718 ()
  {
    DataSource org = varTextElement.getDataSource();
    StaticDataSource ds = new StaticDataSource();
    varTextElement.setDataSource(ds);
    assertEquals(ds, varTextElement.getDataSource());

    varTextElement.setDataSource(org);
    assertEquals(org, varTextElement.getDataSource());
  } // end of testSetDataSource678066718(com.jrefinery.report.filter.DataSource)


  /**
   * Method for testing how works original method:
   * java.lang.String toString()
   * from tested class
   */
  public void testToString ()
  {
    assertNotNull(varTextElement.toString());
  } // end of testToString()

} // end of TextElementTestCase
