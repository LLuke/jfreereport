/*
 * File is generated by 'Unit Tests Generator' developed under
 * 'Web Test Tools' project at http://sf.net/projects/wttools/
 * Copyright (C) 2001 "Artur Hefczyc" <kobit@users.sourceforge.net>
 * to all 'Web Test Tools' subprojects.
 *
 * No rigths to files and no responsibility for code generated
 * by this tool are belonged to author of 'unittestsgen' utility.
 *
 * $Id:$
 * $Author:$
 * $Date:$
 */
package com.jrefinery.report.ext.junit.base;

import com.jrefinery.report.WaitingImageObserver;
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import java.awt.Image;
import java.awt.Toolkit;

/**
 * File <code>WaitingImageObserverTestCase.java</code> is automaticaly generated by
 * 'unittestsgen' application. Code generator is created for java
 * sources and for 'junit' package by "Artur Hefczyc"
 * <kobit@users.sourceforge.net><br/>
 * You should fulfil test methods with proper code for testing
 * purpose. All methods where you should put your code are below and
 * their names starts with 'test'.<br/>
 * You can run unit tests in many ways, however prefered are:
 * <ul>
 *   <li>Run tests for one class only, for example for this class you
 *       can run tests with command:
 *     <pre>
 *       java -cp "jar/thisjarfile.jar;lib/junit.jar" com.jrefinery.report.WaitingImageObserverTestCase
 *     </pre>
 *   </li>
 *   <li>Run tests for all classes in one command call. Code generator
 *       creates also <code>com.jrefinery.report.ext.junit.TestAll.class</code> which runs all
 *       available tests:
 *     <pre>
 *       java -cp "jar/thisjarfile.jar;lib/junit.jar" com.jrefinery.report.ext.junit.TestAll
 *     </pre>
 *   </li>
 *   <li>But the most prefered way is to run all tests from
 *     <em>Ant</em> just after compilation process finished.<br/>
 *     To do it. You need:
 *     <ol>
 *       <li>Ant package from
 *         <a href="http://jakarta.apache.org/">Ant</a>
 *       </li>
 *       <li>JUnit package from
 *         <a href="http://www.junit.org/">JUnit</a>
 *       </li>
 *       <li>Put some code in your <code>build.xml</code> file
 *         to tell Ant how to test your package. Sample code for
 *         Ant's <code>build.xml</code> you can find in created file:
 *         <code>sample-junit-build.xml</code>. And remember to have
 *         <code>junit.jar</code> in CLASSPATH <b>before</b> you run Ant.
 *         To generate reports by ant you must have <code>xalan.jar</code>
 *         in your <code>ANT_HOME/lib/</code> directory.
 *       </li>
 *     </ol>
 *   </li>
 * </ul>
 */
public class WaitingImageObserverTestCase extends TestCase
{
  /**
   * Instance of tested class.
   */
  protected WaitingImageObserver varWaitingImageObserver;
  protected Image image;

  /**
   * Public constructor for creating testing class.
   */
  public WaitingImageObserverTestCase (String name)
  {
    super (name);
  }

  /**
   * This main method is used for run tests for this class only
   * from command line.
   */
  public static void main (String[] args)
  {
    junit.textui.TestRunner.run (suite ());
  }

  /**
   * This method is called every time before particular test execution.
   * It creates new instance of tested class and it can perform some more
   * actions which are necessary for performs tests.
   */
  protected void setUp ()
  {
    image = Toolkit.getDefaultToolkit ().getImage ("com/jrefinery/report/resources/SaveAs16.gif");
    assertNotNull ("Image to be loaded was null", image);
    varWaitingImageObserver = new WaitingImageObserver (image);

  }

  /**
   * Returns all tests which should be performed for testing class.
   * By default it returns only name of testing class. Instance of this
   * is then created with its constructor.
   */
  public static Test suite ()
  {
    return new TestSuite (WaitingImageObserverTestCase.class);
  }

  /**
   * Method for testing how works original method:
   * boolean imageUpdate(java.awt.Image, int, int, int, int, int)
   * from tested class
   */
  public void testImageUpdate2082822785104431104431104431104431104431 ()
  {
    // Just make sure, that there is no exception thrown, can't test any real event here.
    varWaitingImageObserver.imageUpdate(image, 0, 0, 0, 0, 0);
  }

  /**
   * Method for testing how works original method:
   * void run()
   * from tested class
   */
  public void testRun ()
  {
    // locks until the image is either loaded or the loading definitly fails
    varWaitingImageObserver.run();
    assertTrue("ImageDimensions filled", image.getHeight(null) != 0);
    assertTrue("ImageDimensions filled", image.getWidth(null) != 0);
  }

}
